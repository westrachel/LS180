0. Connect to the psql console to execute SQL commands for the ls_burger database:
sudo -u postgres psql ls_burger

2. Query to select all customer names from orders:
SELECT customer_name FROM orders;

3. Query to select all orders including a Chocolate Shake:
SELECT * FROM orders WHERE drink = 'Chocolate Shake';

# takeaway: '=' operator in SQL is used for comparisons, not '=='

4. Query to select burder, side, and drink columns for only the order with id 2:
SELECT burger, side, drink FROM orders WHERE id = 2;

5. Query to select all customers that ordered Onion Rings:
SELECT customer_name FROM orders WHERE side = 'Onion Rings';

6. Create new database from the terminal, not the psql console:
sudo -u postgres createdb a_new_database

7. Connect to database created through the psql console & make a new database from w/in the psql console:
sudo -u postgres psql a_new_database    # to connect
CREATE DATABASE another_database;       # to create new db from w/in psql console

8. Switch connection to a different database from within the psql console:
\c another_database

9. Delete a database from within the psql console:
DROP DATABASE a_new_database;
\list                                   # check deletion by listing all current databases

10. Delete a database from the terminal:
sudo -u postgres dropdb another_database

11. Create tables within a database via psql console:
CREATE TABLE countries (
    id serial,                          # each row specifies: column_name data_type optional_constraints
    name varchar(50) UNIQUE NOT NULL,   # varchar() specifies up to a certain # of characters, but doesn't pad string 
    capital varchar(50) NOT NULL,       #      with spaces if the string's length is less than the argument specified
    population integer
);


CREATE TABLE animals (
    id serial,
    name varchar(100) NOT NULL,
    binomial_name varchar(100) NOT NULL,
    max_weight_kg decimal(8,3),         # decimal's 1st argument specifies total # of digits allowed & 2nd argument
    max_age integer,                    #       specifies digits allowed to the right of the decimal point
    conservation_status char(2)
);

12. Update a date_of_birth column to store an actual date instead of a string & add constraint to ensure value:
exists for each row of the column
ALTER TABLE table_name
    ALTER COLUMN date_of_birth
    TYPE date
    USING date_of_birth::date,  # must specify USING clause to clarify conversion of data type & comma separate chained commands
    SET NOT NULL;

13. Updating column to different precision and scale:
ALTER TABLE animals
    ALTER COLUMN max_weight_kg TYPE decimal(10,4);    # USING clause not required when there is a natural conversion

14. Update table to drop an order total column & replace it with 3 new columns:
ALTER TABLE orders
    ADD COLUMN burger_cost decimal(4, 2) DEFAULT 0,
    ADD COLUMN side_cost decimal(4, 2) DEFAULT 0,
    ADD COLUMN drink_cost decimal(4, 2) DEFAULT 0,
    DROP COLUMN order_total;
    
15. Add multiple rows of data to a table:
INSERT INTO countries (name, capital, population)   # id column not specified will get default value
    VALUES ('USA', 'Washington D.C.', 325365189),   # (row1), (row2), row(3);
           ('Germany', 'Berlin', 82349400),
           ('Japan', 'Tokyo', 126672000);

INSERT INTO celebrities (first_name, last_name, occupation, date_of_birth, deceased)
    VALUES ('Frank', 'Sinatra', 'Singer, Actor', '1915-12-12', true)
           ('Tom', 'Cruise', 'Actor', '1962-07-03', DEFAULT);   # can also explicitly specify a row should use column's default value

16. Drop constraints no longer needed:
ALTER TABLE animals
    DROP CONSTRAINT unique_binomial_name;

ALTER TABLE celebrities
    ALTER COLUMN last_naame DROP NOT NULL;    # NOT NULL is always a column constraint 

17. Query country names and capitals sorted by population:
SELECT name, capital
    FROM countries
    ORDER BY population DESC;
    
SELECT name, capital
    FROM countries
    ORDER BY population;    # default sorts ascendingly for numerical columns

18. Query based on population between 70 million (inclusive) and 200 million (exclusive):
SELECT name, capital, population
    FROM countries
    WHERE population >= 70000000 AND population < 200000000;

19. Query to return all records associated with occupations including singing and acting:
SELECT first_name, last_name
    FROM celebrities
    WHERE (occupation LIKE '%Actor%' OR occupation LIKE '%Actress%')
    AND occupation LIKE '%Singer%';

20. Query to find all orders that don't have fries as a side:
SELECT customer_name
    FROM orders
    WHERE side != 'Fries'
    OR side IS NULL;

21. Queries to find the 2 countries with the largest populations:
SELECT name
    FROM countries
    ORDER BY population DESC
    LIMIT 1;            # returns name of country w/ largest populaton only

SELECT name
    FROM countries
    ORDER BY population DESC
    LIMIT 1 OFFSET 1;   # returns name of country w/ 2nd largest population

SELECT name
    FROM countries
    ORDER BY population DESC
    LIMIT 2;            # return the names of the 2 countries with largest populations

22. Query to return the longest capital name:
SELECT capital
    FROM countries
    ORDER BY length(capital) DESC
    LIMIT 1;

23. Query to return the number of animals associated with each conservation status:
SELECT conservation_status, count(id)
    FROM animals
    GROUP BY conservation_status;

24. Query to return average burger cost for all orders that include fries.
SELECT avg(burger_cost)
    FROM orders
    WHERE side ILIKE 'Fries';     # ILIKE ensures case insensitivity

25. Query to return cheapest side order:
SELECT side_cost
    FROM orders
    ORDER BY side_cost
    DESC LIMIT 1;

SELECT min(side_cost)
    FROM orders
    WHERE side IS NOT NULL;

26. Query to return counts of orders that have either fries or onion rings.
SELECT side, count(id)
    FROM orders
    WHERE side ILIKE 'fries'
    OR side ILIKE 'onion rings'
    GROUP BY side;

27. Add columns to table and fill all rows and fill only certain rows:
ALTER TABLE animals
    ADD COLUMN phylum varchar(100),
    ADD COLUMN kingdom varchar(100);

UPDATE animals
    SET phylum = 'Chordata',
    SET kingdom = 'Animalia';

ALTER TABLE countries
    ADD COLUMN continent varchar(50);

UPDATE countries
    SET continent = 'Europe'
    WHERE (name = 'France' OR name = 'Germany');

27. Replace data for specific rows:
UPDATE orders
    SET drink = 'Lemonade'
    WHERE id = 5;

UPDATE orders
    SET side = 'Fries',
    side_cost = 0.99,
    customer_loyalty_points = 13,
    WHERE id = 4;
