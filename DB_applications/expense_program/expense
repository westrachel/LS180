#! usr/bin/env ruby

require "pg"

puts "Welcome to the Expense Tracker!"

class ExpenseData
	def initialize
		@connection = PG.connect(dbname: "expenses")
	end

	def format_sql_query(query_results)
		query_results.each do |tuple|
			columns = [ tuple["id"].rjust(3),
								  tuple["created_on"].rjust(10),
								  tuple["amount"].rjust(12),
								  tuple["memo"]]
			puts columns.join(" | ")
		end
	end

	def show_expenses
		expenses = @connection.exec "SELECT * FROM expenses ORDER By created_on ASC;"
		format_sql_query(expenses)
	end

	def add_expense(amt, desc)
		return "You must provide an amount and memo." if missing_args?(amt, desc)
		final_desc = fix_quotes(desc)
		time = Date.today
		statement = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"
		@connection.exec_params(statement, [amt, final_desc, time])
	end
	
	def missing_args?(amt, desc)
		amt.nil? || desc.nil?
	end

	def fix_quotes(memo)
		memo.include?("'") ? memo.gsub("'", "''") : memo
	end

	def search_expenses(term)
		sql = "SELECT * FROM expenses WHERE memo ILIKE $1;"
		expenses = @connection.exec_params(sql, ["%#{term}%"])
		format_sql_query(expenses)
	end
end

class CLI
	def initialize
		@app = ExpenseData.new
	end

	def execute(args_arr)
		request = args_arr.first
		case request
		when "list"
			@app.show_expenses
		when "add"
			amt = args_arr[0]
			memo = args_arr[1]
			@app.add_expense(amt, memo)
		when "search"
			@app.search_expenses(args_arr[1])
		else
			help_display
		end
	end
	
	def help_display
		puts <<~MSG
	  	An expense recording system
	  
	  	Commands:
	  	add AMOUNT MEMO [DATE] - record a new expense
	  	clear - delete all expenses
	  	list - list all expenses
	  	delete NUMBER - remove expense with id NUMBER
	  	search QUERY - list expenses with a matching memo field
		MSG
	end
end

CLI.new.execute(ARGV)